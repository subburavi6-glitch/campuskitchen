import express from 'express';
import { authenticateToken, requireRole } from '../middleware/auth.js';

const router = express.Router();

// Get all indents
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { status, meal, date } = req.query;
    
    const where = {};
    if (status) where.status = status;
    if (meal) where.meal = meal;
    if (date) {
      where.requestedForDate = {
        gte: new Date(date),
        lt: new Date(new Date(date).getTime() + 24 * 60 * 60 * 1000)
      };
    }

    const indents = await req.prisma.indent.findMany({
      where,
      include: {
        requester: {
          select: { name: true }
        },
        items: {
          include: {
            item: {
              select: { name: true, unit: true }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    res.json(indents);
  } catch (error) {
    console.error('Get indents error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get single indent
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const indent = await req.prisma.indent.findUnique({
      where: { id: req.params.id },
      include: {
        requester: {
          select: { name: true }
        },
        items: {
          include: {
            item: {
              select: { id: true, name: true, unit: true }
            }
          }
        }
      }
    });

    if (!indent) {
      return res.status(404).json({ error: 'Indent not found' });
    }

    res.json(indent);
  } catch (error) {
    console.error('Get indent error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Create new indent
router.post('/', authenticateToken, requireRole(['COOK', 'CHEF']), async (req, res) => {
  try {
    const { requestedForDate, meal, items, notes, autoGenerated = false } = req.body;

    // Calculate total estimated cost
    let totalCost = 0;
    for (const item of items) {
      const itemData = await req.prisma.item.findUnique({
        where: { id: item.itemId }
      });
      if (itemData) {
        totalCost += parseFloat(item.requestedQty) * parseFloat(itemData.costPerUnit);
      }
    }

    const indent = await req.prisma.indent.create({
      data: {
        requestedBy: req.user.id,
        requestedForDate: new Date(requestedForDate),
        meal,
        notes,
        autoGenerated,
        totalCost: totalCost.toFixed(2),
        items: {
          create: items.map(item => ({
            itemId: item.itemId,
            requestedQty: item.requestedQty.toString(),
            estimatedCost: (parseFloat(item.requestedQty) * parseFloat(item.unitCost || '0')).toFixed(2)
          }))
        }
      },
      include: {
        requester: {
          select: { name: true }
        },
        items: {
          include: {
            item: {
              select: { name: true, unit: true }
            }
          }
        }
      }
    });

    res.status(201).json(indent);
  } catch (error) {
    console.error('Create indent error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Auto-generate indent from meal plans
router.post('/auto-generate', authenticateToken, requireRole(['COOK', 'CHEF']), async (req, res) => {
  try {
    const { date, meal } = req.body;
    const targetDate = date ? new Date(date) : new Date(Date.now() + 24 * 60 * 60 * 1000);
    const targetMeal = meal || 'LUNCH';
    const dayOfWeek = targetDate.getDay() === 0 ? 6 : targetDate.getDay() - 1;

    // Get all meal plans for the specified day and meal
    const mealPlans = await req.prisma.mealPlan.findMany({
      where: {
        day: dayOfWeek,
        meal: targetMeal
      },
      include: {
        dishes: {
          include: {
           dish: {
              include: {

 recipes: {
              include: {
                item: true
              }
            }
              }
           }
          }
        }
      }
    });
     if (mealPlans.length === 0) {
      return res.status(400).json({ error: 'No meal plans found for the specified date and meal' });
    }

    // Calculate total ingredient requirements
    const ingredientMap = new Map();
    
    for (const mealPlan of mealPlans) {
      for (const dish of mealPlan.dishes) {
         for (const recipe of dish.dish.recipes) {
        console.log(recipe);
        const itemId = recipe.itemId;
        const qtyPer5 = parseFloat(recipe.qtyPer5Students);
        const totalQty = (qtyPer5 * mealPlan.plannedStudents) / 5;
        
        if (ingredientMap.has(itemId)) {
          ingredientMap.set(itemId, ingredientMap.get(itemId) + totalQty);
        } else {
          ingredientMap.set(itemId, totalQty);
        }
      }
      }
    }

    // Create indent items
    const indentItems = [];
    let totalCost = 0;
    
    for (const [itemId, quantity] of ingredientMap) {
      const item = await req.prisma.item.findUnique({
        where: { id: itemId }
      });
      
      if (item) {
        const estimatedCost = quantity * parseFloat(item.costPerUnit);
        totalCost += estimatedCost;
        
        indentItems.push({
          itemId,
          requestedQty: quantity.toFixed(2),
          estimatedCost: estimatedCost.toFixed(2)
        });
      }
    }

    // Create the auto-generated indent
    const indent = await req.prisma.indent.create({
      data: {
        requestedBy: req.user.id,
        requestedForDate: targetDate,
        meal: targetMeal,
        notes: `Auto-generated indent for ${targetMeal} on ${targetDate.toDateString()}`,
        autoGenerated: true,
        totalCost: totalCost.toFixed(2),
        items: {
          create: indentItems
        }
      },
      include: {
        requester: {
          select: { name: true }
        },
        items: {
          include: {
            item: {
              select: { name: true, unit: true }
            }
          }
        }
      }
    });

    res.status(201).json({
      indent,
      itemCount: indentItems.length,
      totalCost: totalCost.toFixed(2)
    });
  } catch (error) {
    console.error('Auto-generate indent error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Approve indent
router.post('/:id/approve', authenticateToken, requireRole(['CHEF', 'ADMIN']), async (req, res) => {
  try {
    const { items } = req.body; // Array of { itemId, approvedQty }

    const indent = await req.prisma.indent.update({
      where: { id: req.params.id },
      data: {
        status: 'APPROVED',
        items: {
          updateMany: items.map(item => ({
            where: { 
              indentId: req.params.id,
              itemId: item.itemId 
            },
            data: { approvedQty: item.approvedQty }
          }))
        }
      },
      include: {
        requester: {
          select: { name: true }
        },
        items: {
          include: {
            item: {
              select: { name: true, unit: true }
            }
          }
        }
      }
    });

    res.json(indent);
  } catch (error) {
    console.error('Approve indent error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Reject indent
router.post('/:id/reject', authenticateToken, requireRole(['CHEF', 'ADMIN']), async (req, res) => {
  try {
    const { reason } = req.body;

    const indent = await req.prisma.indent.update({
      where: { id: req.params.id },
      data: {
        status: 'REJECTED',
        notes: reason
      },
      include: {
        requester: {
          select: { name: true }
        },
        items: {
          include: {
            item: {
              select: { name: true, unit: true }
            }
          }
        }
      }
    });

    res.json(indent);
  } catch (error) {
    console.error('Reject indent error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Mark indent as sent
router.post('/:id/sent', authenticateToken, requireRole(['CHEF', 'ADMIN']), async (req, res) => {
  try {
    const { comments } = req.body;

    // Fetch current indent to get notes
    const currentIndent = await req.prisma.indent.findUnique({
      where: { id: req.params.id },
      select: { notes: true }
    });

    const updatedNotes = comments ? `${currentIndent?.notes || ''}\n\nSent Comments: ${comments}` : currentIndent?.notes;

    const indent = await req.prisma.indent.update({
      where: { id: req.params.id },
      data: {
        status: 'SENT',
        notes: updatedNotes
      },
      include: {
        requester: {
          select: { name: true }
        },
        items: {
          include: {
            item: {
              select: { name: true, unit: true }
            }
          }
        }
      }
    });

    res.json(indent);
  } catch (error) {
    console.error('Mark indent as sent error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;