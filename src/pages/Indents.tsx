import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { Plus, Search, Filter, ClipboardList, Eye, Edit, Trash2, Check, X, Clock, Send } from 'lucide-react';
import api from '../utils/api';
import { useAuth } from '../contexts/AuthContext';
import Modal from '../components/Modal';
import Drawer from '../components/Drawer';
import IndentForm from '../components/forms/IndentForm';
import { showSuccess, showError, showConfirm, showInfo } from '../utils/sweetAlert';
import Swal from 'sweetalert2';

interface Indent {
  id: string;
  meal: 'BREAKFAST' | 'LUNCH' | 'SNACKS' | 'DINNER';
  status: 'PENDING' | 'APPROVED' | 'PARTIAL' | 'REJECTED' | 'SENT';
  requestedForDate: string;
  requester: { name: string };
  notes?: string;
  autoGenerated: boolean;
  totalCost: string;
  createdAt: string;
  items: Array<{
    item: {
      id: string;
      name: string;
      unit: string | { id: string; name: string; symbol?: string; active?: boolean; createdAt?: string; updatedAt?: string };
    };
    requestedQty: string;
    approvedQty: string;
    issuedQty: number;
    estimatedCost: string;
  }>;
}

const statusColors = {
  PENDING: 'bg-yellow-100 text-yellow-800',
  APPROVED: 'bg-green-100 text-green-800',
  PARTIAL: 'bg-blue-100 text-blue-800',
  REJECTED: 'bg-red-100 text-red-800',
  SENT: 'bg-purple-100 text-purple-800',
};

const mealColors = {
  BREAKFAST: 'bg-orange-100 text-orange-800',
  LUNCH: 'bg-green-100 text-green-800',
  SNACKS: 'bg-purple-100 text-purple-800',
  DINNER: 'bg-blue-100 text-blue-800',
};

const Indents: React.FC = () => {
  const { user } = useAuth();
  const [indents, setIndents] = useState<Indent[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [mealFilter, setMealFilter] = useState('');
  const [showDrawer, setShowDrawer] = useState(false);
  const [selectedIndent, setSelectedIndent] = useState<Indent | null>(null);
  const [viewIndent, setViewIndent] = useState<Indent | null>(null);
  const [approvalIndent, setApprovalIndent] = useState<Indent | null>(null);
  const [showAutoIndentModal, setShowAutoIndentModal] = useState(false);

  useEffect(() => {
    fetchIndents();
  }, [statusFilter, mealFilter]);

  const fetchIndents = async () => {
    try {
      const params: any = {};
      if (statusFilter) params.status = statusFilter;
      if (mealFilter) params.meal = mealFilter;
      
      const response = await api.get('/indents', { params });
      setIndents(response.data);
    } catch (error) {
      console.error('Failed to fetch indents:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (indent: Indent) => {
    if (indent.status !== 'PENDING' && user?.role !== 'CHEF' && user?.role !== 'ADMIN') {
      showError('Access Denied', 'Only pending indents can be edited');
      return;
    }
    setSelectedIndent(indent);
    setShowDrawer(true);
  };

  const handleDelete = async (indent: Indent) => {
    if (indent.status !== 'PENDING') {
      showError('Access Denied', 'Only pending indents can be deleted');
      return;
    }
    
    const result = await showConfirm(
      'Delete Indent',
      'Are you sure you want to delete this indent?'
    );

    if (result.isConfirmed) {
      try {
        await api.delete(`/indents/${indent.id}`);
        showSuccess('Success', 'Indent deleted successfully');
        fetchIndents();
      } catch (error) {
        console.error('Failed to delete indent:', error);
      }
    }
  };

  const handleView = (indent: Indent) => {
    setViewIndent(indent);
  };

  const handleApprove = (indent: Indent) => {
    setApprovalIndent(indent);
  };

  const handleReject = async (indent: Indent) => {
    const { value: reason } = await Swal.fire({
      title: 'Reject Indent',
      input: 'textarea',
      inputLabel: 'Reason for rejection',
      inputPlaceholder: 'Enter reason for rejecting this indent...',
      inputAttributes: {
        'aria-label': 'Reason for rejection'
      },
      showCancelButton: true,
      confirmButtonColor: '#1c3c80',
      cancelButtonColor: '#ef4444'
    });

    if (!reason) return;

    try {
      await api.post(`/indents/${indent.id}/reject`, { reason });
      showSuccess('Success', 'Indent rejected successfully');
      fetchIndents();
    } catch (error) {
      console.error('Failed to reject indent:', error);
    }
  };

  const handleApprovalSubmit = async (items: any[]) => {
    if (!approvalIndent) return;

    try {
      await api.post(`/indents/${approvalIndent.id}/approve`, { items });
      showSuccess('Success', 'Indent approved successfully');
      setApprovalIndent(null);
      fetchIndents();
    } catch (error) {
      console.error('Failed to approve indent:', error);
    }
  };

  const handleAutoIndent = async () => {
    try {
      const response = await api.post('/indents/auto-generate', {
        date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        meal: 'LUNCH'
      });
      showSuccess('Success', `Auto indent generated with ${response.data.itemCount} items`);
      setShowAutoIndentModal(false);
      fetchIndents();
    } catch (error) {
      console.error('Failed to generate auto indent:', error);
      showError('Error', 'Failed to generate auto indent');
    }
  };

  const handleMarkAsSent = async (indent: Indent) => {
    try {
      await api.post(`/indents/${indent.id}/sent`, { comments: '' });
      showSuccess('Success', 'Indent marked as sent');
      fetchIndents();
    } catch (error) {
      console.error('Failed to mark indent as sent:', error);
      showError('Error', 'Failed to mark indent as sent');
    }
  };

  const handleDrawerSuccess = () => {
    setShowDrawer(false);
    setSelectedIndent(null);
    fetchIndents();
  };

  const handleDrawerCancel = () => {
    setShowDrawer(false);
    setSelectedIndent(null);
  };

  const filteredIndents = indents.filter(indent =>
    indent.requester.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    indent.meal.toLowerCase().includes(searchTerm.toLowerCase()) ||
    new Date(indent.requestedForDate).toLocaleDateString().includes(searchTerm)
  );

  const canCreate = user?.role === 'COOK' || user?.role === 'CHEF';
  const canApprove = user?.role === 'CHEF' || user?.role === 'ADMIN';
  const canEdit = user?.role === 'CHEF' || user?.role === 'ADMIN';

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">Indents</h1>
        {canCreate && (
          <div className="flex space-x-2">
            <button
              onClick={() => setShowAutoIndentModal(true)}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Plus size={16} />
              <span>Auto Generate</span>
            </button>
            <button
              onClick={() => setShowDrawer(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Plus size={16} />
              <span>Manual Indent</span>
            </button>
          </div>
        )}
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow p-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
            <input
              type="text"
              placeholder="Search indents..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">All Status</option>
            <option value="PENDING">Pending</option>
            <option value="APPROVED">Approved</option>
            <option value="PARTIAL">Partial</option>
            <option value="REJECTED">Rejected</option>
            <option value="SENT">Sent</option>
          </select>
          <select
            value={mealFilter}
            onChange={(e) => setMealFilter(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">All Meals</option>
            <option value="BREAKFAST">Breakfast</option>
            <option value="LUNCH">Lunch</option>
            <option value="SNACKS">Snacks</option>
            <option value="DINNER">Dinner</option>
          </select>
        </div>
      </div>

      {/* Indents Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredIndents.map((indent, index) => (
          <motion.div
            key={indent.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="bg-white rounded-lg shadow hover:shadow-md transition-shadow p-6"
          >
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <ClipboardList size={24} className="text-blue-600" />
                </div>
                <div>
                  <div className="flex items-center space-x-2 mb-1">
                    <span className={`px-2 py-1 text-xs font-semibold rounded-full ${mealColors[indent.meal]}`}>
                      {indent.meal}
                    </span>
                    <span className={`px-2 py-1 text-xs font-semibold rounded-full ${statusColors[indent.status]}`}>
                      {indent.status}
                    </span>
                    {indent.autoGenerated && (
                      <span className="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                        AUTO
                      </span>
                    )}
                  </div>
                  <p className="text-sm text-gray-500">by {indent.requester.name}</p>
                </div>
              </div>
              <Clock size={20} className="text-gray-400" />
            </div>

            <div className="space-y-2 mb-4">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Requested for:</span>
                <span className="font-medium">
                  {new Date(indent.requestedForDate).toLocaleDateString()}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Items:</span>
                <span className="font-medium">{indent.items.length}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Created:</span>
                <span className="font-medium">
                  {new Date(indent.createdAt).toLocaleDateString()}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Estimated Cost:</span>
                <span className="font-bold text-green-600">₹{indent.totalCost}</span>
              </div>
            </div>

            {indent.notes && (
              <div className="mb-4 p-2 bg-gray-50 rounded text-sm text-gray-600">
                {indent.notes}
              </div>
            )}

            <div className="pt-4 border-t border-gray-200">
              <div className="flex justify-between items-center">
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleView(indent)}
                    className="text-blue-600 hover:text-blue-800 p-1 rounded"
                    title="View Details"
                  >
                    <Eye size={16} />
                  </button>
                  {(canEdit || (indent.status === 'PENDING' && indent.requester.name === user?.name)) && (
                    <button
                      onClick={() => handleEdit(indent)}
                      className="text-green-600 hover:text-green-800 p-1 rounded"
                      title="Edit Indent"
                    >
                      <Edit size={16} />
                    </button>
                  )}
                  {indent.status === 'PENDING' && indent.requester.name === user?.name && (
                    <button
                      onClick={() => handleDelete(indent)}
                      className="text-red-600 hover:text-red-800 p-1 rounded"
                      title="Delete Indent"
                    >
                      <Trash2 size={16} />
                    </button>
                  )}
                </div>
                {canApprove && indent.status === 'PENDING' && (
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handleApprove(indent)}
                      className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm flex items-center space-x-1"
                    >
                      <Check size={14} />
                      <span>Approve</span>
                    </button>
                    <button
                      onClick={() => handleReject(indent)}
                      className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm flex items-center space-x-1"
                    >
                      <X size={14} />
                      <span>Reject</span>
                    </button>
                  </div>
                )}
                {canApprove && indent.status === 'APPROVED' && (
                  <button
                    onClick={() => handleMarkAsSent(indent)}
                    className="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-sm flex items-center space-x-1"
                  >
                    <Send size={14} />
                    <span>Mark Sent</span>
                  </button>
                )}
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {filteredIndents.length === 0 && !loading && (
        <div className="text-center py-12">
          <ClipboardList size={48} className="mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No indents found</h3>
          <p className="text-gray-500 mb-4">
            {searchTerm || statusFilter || mealFilter ? 'Try adjusting your filters' : 'Get started by creating your first indent'}
          </p>
          {canCreate && (
            <button
              onClick={() => setShowDrawer(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
            >
              Create Indent
            </button>
          )}
        </div>
      )}

      {/* Indent Form Drawer */}
      <Drawer
        isOpen={showDrawer}
        onClose={handleDrawerCancel}
        title={selectedIndent ? 'Edit Indent' : 'Create Indent'}
      >
        <IndentForm
          indent={selectedIndent}
          onSuccess={handleDrawerSuccess}
          onCancel={handleDrawerCancel}
        />
      </Drawer>

      {/* Indent View Modal */}
      <Modal
        isOpen={!!viewIndent}
        onClose={() => setViewIndent(null)}
        title="Indent Details"
        size="xl"
      >
        {viewIndent && (
          <div className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-500">Meal</label>
                <span className={`inline-block px-2 py-1 text-xs font-semibold rounded-full ${mealColors[viewIndent.meal]}`}>
                  {viewIndent.meal}
                </span>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-500">Status</label>
                <span className={`inline-block px-2 py-1 text-xs font-semibold rounded-full ${statusColors[viewIndent.status]}`}>
                  {viewIndent.status}
                </span>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-500">Requested By</label>
                <p className="text-lg">{viewIndent.requester.name}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-500">Requested For</label>
                <p className="text-lg">{new Date(viewIndent.requestedForDate).toLocaleDateString()}</p>
              </div>
            </div>

            {viewIndent.notes && (
              <div>
                <label className="block text-sm font-medium text-gray-500">Notes</label>
                <p className="text-gray-700 bg-gray-50 p-3 rounded-lg">{viewIndent.notes}</p>
              </div>
            )}

            <div>
              <h4 className="font-medium text-gray-900 mb-3">Items Requested</h4>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Item</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Requested</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Approved</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Issued</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Cost</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {viewIndent.items.map((item, index) => (
                      <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.item.name} {typeof item.item.unit === 'object' ? (item.item.unit.symbol ?? item.item.unit.name ?? '') : item.item.unit}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.requestedQty}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.approvedQty}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.issuedQty}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          ₹{item.estimatedCost}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}
      </Modal>

      {/* Auto Indent Generation Modal */}
      <Modal
        isOpen={showAutoIndentModal}
        onClose={() => setShowAutoIndentModal(false)}
        title="Auto Generate Indent"
        size="md"
      >
        <AutoIndentForm
          onGenerate={handleAutoIndent}
          onCancel={() => setShowAutoIndentModal(false)}
        />
      </Modal>

      {/* Approval Modal */}
      <Modal
        isOpen={!!approvalIndent}
        onClose={() => setApprovalIndent(null)}
        title="Approve Indent"
        size="xl"
      >
        {approvalIndent && (
          <ApprovalForm
            indent={approvalIndent}
            onSubmit={handleApprovalSubmit}
            onCancel={() => setApprovalIndent(null)}
          />
        )}
      </Modal>
    </div>
  );
};

// Auto Indent Generation Form
const AutoIndentForm: React.FC<{
  onGenerate: () => void;
  onCancel: () => void;
}> = ({ onGenerate, onCancel }) => {
  const [selectedDate, setSelectedDate] = useState(
    new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0]
  );
  const [selectedMeal, setSelectedMeal] = useState('LUNCH');

  return (
    <div className="space-y-6">
      <div className="bg-blue-50 p-4 rounded-lg">
        <h4 className="font-medium text-blue-900 mb-2">Auto Generate Indent</h4>
        <p className="text-sm text-blue-800">
          System will automatically calculate ingredient requirements from all meal plans
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Date</label>
          <input
            type="date"
            value={selectedDate}
            onChange={(e) => setSelectedDate(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Meal</label>
          <select
            value={selectedMeal}
            onChange={(e) => setSelectedMeal(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="BREAKFAST">Breakfast</option>
            <option value="LUNCH">Lunch</option>
            <option value="SNACKS">Snacks</option>
            <option value="DINNER">Dinner</option>
          </select>
        </div>
      </div>

      <div className="bg-green-50 p-4 rounded-lg">
        <h5 className="font-medium text-green-900 mb-2">Auto Generation Process:</h5>
        <ul className="text-sm text-green-800 space-y-1">
          <li>• Pull all meal plans for selected date and meal</li>
          <li>• Extract dishes from meal plans</li>
          <li>• Calculate ingredient requirements from recipes</li>
          <li>• Sum up quantities for all ingredients</li>
          <li>• Calculate total estimated cost</li>
        </ul>
      </div>

      <div className="flex justify-end space-x-3 pt-6 border-t">
        <button
          onClick={onCancel}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          onClick={onGenerate}
          className="px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-lg hover:bg-green-700"
        >
          Generate Auto Indent
        </button>
      </div>
    </div>
  );
};

// Approval Form Component
const ApprovalForm: React.FC<{
  indent: Indent;
  onSubmit: (items: any[]) => void;
  onCancel: () => void;
}> = ({ indent, onSubmit, onCancel }) => {

  console.log(indent);
  const [items, setItems] = useState(
    indent.items.map(item => ({
      itemId: item.item.id,
      requestedQty: item.requestedQty,
      approvedQty: item.requestedQty
    }))
  );

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(items);
  };

  const updateApprovedQty = (index: number, qty: string) => {
    const newItems = [...items];
    newItems[index].approvedQty = qty;
    setItems(newItems);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="bg-blue-50 p-4 rounded-lg">
        <h4 className="font-medium text-blue-900">
          Approving {indent.meal} for {new Date(indent.requestedForDate).toLocaleDateString()}
        </h4>
        <p className="text-sm text-blue-700">Requested by: {indent.requester.name}</p>
      </div>

      <div className="space-y-4">
        {indent.items.map((item, index) => (
          <div key={index} className="grid grid-cols-3 gap-4 items-center p-4 bg-gray-50 rounded-lg">
            <div>
              <p className="font-medium text-gray-900">{item.item.name}</p>
              <p className="text-sm text-gray-500">Unit: {typeof item.item.unit === 'object' ? (item.item.unit.symbol ?? item.item.unit.name ?? '') : item.item.unit}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Requested: {item.requestedQty}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Approved Quantity
              </label>
              <input
                type="text"
                value={items[index].approvedQty}
                onChange={(e) => updateApprovedQty(index, e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter approved quantity"
              />
            </div>
          </div>
        ))}
      </div>

      <div className="flex justify-end space-x-3 pt-6 border-t">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-lg hover:bg-green-700"
        >
          Approve Indent
        </button>
      </div>
    </form>
  );
};

export default Indents;